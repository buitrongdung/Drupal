<?php
namespace Drupal\portfolio\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\Form;
use Drupal\quickedit\Ajax\FieldFormSavedCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Component\Utility\NestedArray;


/**
 * Provides a 'home content' block.
 *
 * @Block(
 *   id = "portfolio",
 *   admin_label = @Translation("Portfolio block"),
 *   category = @Translation("Custom portfolio block ")
 * )
 */
class PortfolioBlock extends BlockBase
{

    /**
     * {@inheritdoc}
     */
    public function defaultConfiguration() {
        return parent::defaultConfiguration() + [
                'vid' => [],
            ];
    }

    public function blockForm($form, FormStateInterface $form_state)
    {
        $config = $this->getConfiguration();

        $form['portfolio'] = [
            '#type' => 'fieldset',
            '#title' => t('Portfolio'),
            '#description' => t('Select one or more terms ')
        ];

//        $form['portfolio']['taxonomy'] = [
//            '#type' => 'select',
//            '#title' => t('Categories'),
//            '#description' => t('Select a taxonomy'),
//            '#options' => [0 => 'All'] + $this->getTaxonomy(),
//            '#default_value' => $this->configuration['taxonomy'],
//            '#ajax' => [
//                'callback' => [$this, 'onChangeTaxonomy'],
//                'event' => 'change',
//                'wrapper' => 'portfolio-wrapper',
//                'progress' => [
//                    'type' => 'throbber',
//                    'message' => t('Verifying entry...'),
//                ],
//            ],
//        ];
        $taxonomy = '';
//        if ($this->configuration['taxonomy']) {
//            $taxonomy = $this->configuration['taxonomy'];
//        }
        $form['portfolio']['terms'] = [
            '#type' => 'select',
            '#multiple' => TRUE,
            '#size' => '10',
            '#options' => $this->getTermCategories(),
            '#default_value' => $this->configuration['terms'],
            '#attributes' => [
                'id' => ['portfolio-wrapper'],
            ],
        ];

//        $form['#attached']['library'] = 'portfolio/manage';

        return $form;
    }

    public function onChangeTaxonomy(array &$form, FormStateInterface $form_state) {
        $triggering_element = $form_state->getTriggeringElement();
        $parents = array_slice($triggering_element['#array_parents'], 0, 1);
        $nest = NestedArray::getValue($form, $parents);
        $vid = $nest['portfolio']['taxonomy']['#value'];
        $elm['portfolio']['terms'] = [
            '#type' => 'select',
            '#multiple' => 'multiple',
            '#size' => '10',
            '#options' => $this->getTermCategories($vid),
            '#default_value' => $this->configuration['terms'],
            '#attributes' => [
                'id' => ['portfolio-wrapper'],
            ],
        ];
//        $elm['#multiple'] = TRUE;
        return ['#markup' => \Drupal::service('renderer')->render($elm)];
    }

    public function blockSubmit($form, FormStateInterface $form_state)
    {
        parent::blockSubmit($form, $form_state); // TODO: Change the autogenerated stub

        $num_term = $form_state->getValue('portfolio');
        $this->configuration['terms'] = $num_term['terms'];
        $this->configuration['taxonomy'] = $num_term['taxonomy'];
    }

    public function build()
    {
        $tids = $this->configuration['terms'];
        $arr_cate = [];
        foreach ($tids as $tid) {
            $taxonomy = \Drupal\taxonomy\Entity\Term::load($tid);
            $t_name = $taxonomy->getName();
            $t_image =  file_url_transform_relative(file_create_url($taxonomy->field_images->entity->getFileUri()));
            $t_desc = $taxonomy->getDescription();
            $arr_cate[$tid] = [
                'url' => 'taxonomy/term/' . $tid,
                'name' => $t_name,
                'image' => $t_image,
                'desc'  => $t_desc,
            ];
        }

        $build['cates'] =  array(
            '#markup' => $arr_cate,
            '#access' => TRUE
        );
        return $build;
    }

    public function getTaxonomy()
    {
        $names = [];
        $config_names = \Drupal::configFactory()->listAll('taxonomy.vocabulary.');
        foreach ($config_names as $config_name) {
            $id = substr($config_name, strlen('taxonomy.vocabulary.'));
            $names[$id] = ucwords($id);
        }
        return $names;
    }

    public function getTermCategories($vid = null)
    {
        if (!empty($vid) || $vid > 0) {
            $query = \Drupal::entityQuery('taxonomy_term')->condition('status', 1)->condition('vid', $vid);
        } else {
            $query = \Drupal::entityQuery('taxonomy_term')->condition('status', 1);
        }
        $tids = $query->execute();
        $arr_term_ops = [];
        foreach ($tids as $tid) {
            $taxonomy = \Drupal\taxonomy\Entity\Term::load($tid);
            $t_name = $taxonomy->getName();
            $arr_term_ops[$tid] = $t_name;
        }
        return $arr_term_ops;
    }

}