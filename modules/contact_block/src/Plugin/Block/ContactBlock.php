<?php
namespace Drupal\contact_block\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;



/**
 *
 * @Block(
 *   id = "contact_block",
 *   admin_label = @Translation("Contact Block"),
 *   category = @Translation("Custom block")
 * )
 */

class ContactBlock extends BlockBase implements ContainerFactoryPluginInterface
{

    protected $configFactory;

    public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory)
    {
        parent::__construct($configuration, $plugin_id, $plugin_definition);
        $this->configFactory = $config_factory;

    }

    public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition)
    {
        return new static(
            $configuration,
            $plugin_id,
            $plugin_definition,
            $container->get('config.factory')
        );
    }

    public function blockForm($form, FormStateInterface $form_state)
    {
        parent::blockForm($form, $form_state); // TODO: Change the autogenerated stub
        $form['contact_inf'] = [
            '#type' => 'fieldset',
            '#title' => 'Contact form',
            '#description' => t('Information contact'),
        ];
        $form['contact_inf']['phone'] = [
            '#type' => 'textfield',
            '#default_value' => $this->configuration['contact_inf']['phone'],
            '#title' => $this->t('Phone'),
            '#required' => TRUE,
        ];

        $form['contact_inf']['email'] = [
            '#type' => 'email',
            '#default_value' => $this->configuration['contact_inf']['email'],
            '#title' => $this->t('Email'),
            '#required' => TRUE,
        ];
        $form['contact_inf']['address'] = [
            '#type' => 'textfield',
            '#default_value' => $this->configuration['contact_inf']['address'],
            '#title' => $this->t('Address'),
            '#required' => TRUE,
        ];
        return $form;
    }

    public function blockSubmit($form, FormStateInterface $form_state)
    {
        parent::blockSubmit($form, $form_state); // TODO: Change the autogenerated stub
        $home_content = $form_state->getValue('contact_inf');
        $this->configuration['contact_inf'] = [
            'phone' => $home_content['phone'],
            'email' => $home_content['email'],
            'address' => $home_content['address']
        ];
    }

    public function blockValidate($form, FormStateInterface $form_state)
    {
        parent::blockValidate($form, $form_state); // TODO: Change the autogenerated stub
        $values = $form_state->getValues();
        if (strpos($values['contact_inf']['email'], '.com') === FALSE ) {
            $form_state->setErrorByName('email', t('This is not a .com email address.'));
        }
        if (!is_numeric($values['contact_inf']['phone'])) {
            $form_state->setErrorByName('phone', t('Please enter phone is number'));
        }
        if (strlen($values['contact_inf']['phone']) == '') {
            $form_state->setErrorByName('phone', t('Please enter phone number'));
        }
        if (strlen($values['contact_inf']['email']) == '') {
            $form_state->setErrorByName('phone', t('Please enter emailr'));
        }
        if (strlen($values['contact_inf']['address']) == '') {
            $form_state->setErrorByName('phone', t('Please enter address'));
        }
    }

    /**
     * {@inheritdoc}
     */
    public function build() {
        $param = $this->configuration['contact_inf'];
        return \Drupal::formBuilder()->getForm('Drupal\contact_block\Form\ContactBlockForm', $param);
    }

}
